name: release

on:
  release:
    types: [published]

env:
  GO_VERSION: "1.20"
  RUST_VERSION: "1.70.0"

jobs:
  release:
    runs-on: ${{ matrix.os }}
    permissions:
      contents: write
    env:
      ASSET: ""
    strategy:
      matrix:
        build:
          - freebsd-x86_64
          - linux-arm64
          - linux-x86_64
          - macos-arm64
          - macos-x86_64
          - windows-x86_64
        include:
          - build: freebsd-x86_64
            os: ubuntu-22.04
            target: x86_64-unknown-freebsd
          - build: linux-arm64
            os: ubuntu-22.04
            target: aarch64-unknown-linux-gnu
          - build: linux-x86_64
            os: ubuntu-22.04
            target: x86_64-unknown-linux-gnu
          - build: macos-x86_64
            os: macos-12
            target: x86_64-apple-darwin
          - build: macos-arm64
            os: macos-12
            target: aarch64-apple-darwin
          - build: windows-x86_64
            os: ubuntu-22.04
            target: x86_64-pc-windows-gnu
    steps:
      - uses: actions/checkout@v3

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}
          check-latest: true

      - name: Set up Rust
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{ env.RUST_VERSION }}
          target: ${{ matrix.target }}

      - name: Install cross
        run: cargo install cross

      - name: Rust cargo build
        run: cross build --release --target ${{ matrix.target }}

      - name: Build archive
        shell: bash
        run: |
          staging="metafmt-${{ github.ref_name }}-${{ matrix.target }}"
          if [ "${{ matrix.target }}" = "x86_64-pc-windows-gnu" ]; then
            cp "target/${{ matrix.target }}/release/metafmt.exe" metafmt.exe
            zip "$staging.zip" metafmt.exe
            echo "ASSET=$staging.zip" >> $GITHUB_ENV
          else
            cp "target/${{ matrix.target }}/release/metafmt" metafmt
            tar czf "$staging.tar.gz" metafmt
            echo "ASSET=$staging.tar.gz" >> $GITHUB_ENV
          fi

      - name: Upload release archive
        env:
          GH_TOKEN: ${{ github.token }}
        run: gh release upload ${{ github.ref_name }} ${{ env.ASSET }}
